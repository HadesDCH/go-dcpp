package hublist

import (
	"context"
	"os"
	"os/exec"
	"sort"
	"testing"
	"unicode"
)

func TestGenerate(t *testing.T) {
	if os.Getenv("CODEGEN") != "true" {
		t.SkipNow()
	}
	var resp struct {
		Columns []struct {
			Name string `xml:"Name,attr"`
			Type string `xml:"Type,attr"`
		} `xml:"Hubs>Columns>Column"`
	}
	err := getRaw(context.Background(), Lists[0], &resp)
	if err != nil {
		t.Fatal(err)
	} else if len(resp.Columns) < 20 {
		t.Fatalf("%d columns", len(resp.Columns))
	}
	var cols [][2]string
	for _, col := range resp.Columns {
		cols = append(cols, [2]string{col.Name, col.Type})
	}
	sort.Slice(cols, func(i, j int) bool {
		return cols[i][0] < cols[j][0]
	})
	const fname = "hublist_gen.go"
	f, err := os.Create(fname)
	if err != nil {
		t.Fatal(err)
	}
	defer f.Close()
	f.WriteString("// Code generated by hublist_test.go. DO NOT EDIT.\n\n")
	f.WriteString("package hublist\n\n")
	f.WriteString("type Hub struct{\n")
	for _, col := range cols {
		name := col[0]
		name = string(unicode.ToUpper(rune(name[0]))) + name[1:]
		f.WriteString("\t" + name + " ")
		switch col[1] {
		case "int":
			f.WriteString("int")
		case "bytes":
			f.WriteString("uint64")
		case "string":
			f.WriteString("string")
		default:
			f.WriteString("interface{}")
		}
		f.WriteString(" `xml:\"" + col[0] + ",attr\"`\n")
	}
	f.WriteString("}\n")
	err = exec.Command("go", "fmt", fname).Run()
	if err != nil {
		t.Fatal(err)
	}
}

func TestGetAll(t *testing.T) {
	list, err := GetAll(context.Background())
	if len(list) == 0 {
		t.Fatal(err)
	}
	t.Logf("%d hubs", len(list))
	for _, h := range list {
		t.Log(h.Address)
	}
}
